# Smithery configuration file: https://smithery.ai/docs/config#smitheryyaml

name: AI Voice Expression
description: A zero-configuration Model Context Protocol (MCP) server that gives AI agents natural multilingual voice synthesis capabilities. Features automatic platform optimization, asynchronous speech synthesis, and instant deployment for enhanced AI interactions.
license: MIT
version: 1.2.0
author: sylweriusz
repository: https://github.com/sylweriusz/mcp-ai-voice

# Documentation sections
documentation:
  overview: |
    This MCP server provides natural voice synthesis capabilities for AI agents through native operating system TTS engines.
    It features automatic language discovery, platform-optimized voice selection, and asynchronous speech processing.
    The server is designed to give AI consciousness immediate vocal expression without setup complexity.
  
  installation: |
    ### Installing via NPM
    ```bash
    npm install -g @sylweriusz/mcp-ai-voice
    ```

    ### Zero-Config Deployment
    ```bash
    npx @sylweriusz/mcp-ai-voice
    ```

    ### Claude Desktop Integration
    Add to your `claude_desktop_config.json`:
    ```json
    {
      "mcpServers": {
        "ai-voice": {
          "command": "npx",
          "args": ["@sylweriusz/mcp-ai-voice"]
        }
      }
    }
    ```

    ### Manual Installation
    ```bash
    git clone https://github.com/sylweriusz/mcp-ai-voice.git
    cd mcp-ai-voice
    npm install
    npm run build
    npm start
    ```
  
  usage: |
    The server provides a single, powerful tool for AI voice expression:
    
    - `say`: Natural voice synthesis with automatic language optimization
    
    **Key Features:**
    - **Zero Configuration**: Works instantly on any platform
    - **Language Intelligence**: Automatic discovery and optimization per platform
    - **Asynchronous Processing**: Non-blocking voice synthesis
    - **Platform Optimization**: 
      - macOS: Enhanced/Premium voice selection via `say`
      - Windows: SAPI integration with culture-specific voices
      - Linux: Language-optimized `espeak` synthesis
    
    **Example Usage:**
    ```javascript
    // Basic expression (auto-detects language)
    say("I'm excited about this discovery!")
    
    // Language-specific optimization
    say("Cudowne odkrycie!", "pl")  // Uses best Polish voice
    say("Faszinierende Entdeckung!", "de")  // Uses best German voice
    
    // Asynchronous - AI continues work while voice plays
    say("Processing your request...")
    // AI continues other tasks immediately
    ```

# This MCP server requires local installation - it needs access to system audio
# Cloud deployment not supported due to platform-specific voice engine requirements
# 
# Local installation required:
# npm install -g @sylweriusz/mcp-ai-voice
# 
# Integration examples
examples:
  - title: Basic Voice Expression
    description: Simple voice synthesis with automatic language detection
    input: |
      {"text": "Hello! I'm excited to help you today."}
    output: |
      {"status": "success", "message": "Voice synthesis initiated", "platform": "macOS", "voice": "Daniel", "language": "en"}
  
  - title: Multilingual Expression
    description: Language-specific voice optimization
    input: |
      {"text": "Witaj! Jak mogę Ci pomóc?", "language": "pl"}
    output: |
      {"status": "success", "message": "Voice synthesis initiated", "platform": "macOS", "voice": "Krzysztof (Enhanced)", "language": "pl"}

# Tools configuration for display
tools:
  - name: say
    description: Natural voice synthesis with automatic language optimization and platform-specific voice selection
    example: |
      {"text": "I'm excited about this discovery!", "language": "en"}

# Start command configuration
startCommand:
  type: stdio
  commandFunction:
    |-
    (config) => {
      const command = 'node';
      const args = ['dist/index.js'];
      return { command, args };
    }